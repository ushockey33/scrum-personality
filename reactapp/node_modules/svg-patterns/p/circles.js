'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var dom = require('virtual-dom/h');

var _require = require('../helpers'),
    pattern = _require.pattern;

var defaults = {
	size: 15, // size of the pattern
	radius: 3,
	complement: true,
	fill: '#545454', // any SVG-compatible color
	strokeWidth: 0,
	stroke: 'none', // any SVG-compatible color
	background: null // any SVG-compatible color
};

var circles = function circles() {
	var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	opt = Object.assign({}, defaults, opt);
	var s = opt.size;

	var children = [dom('circle', {
		cx: s / 2, cy: s / 2, r: opt.radius,
		fill: opt.fill,
		stroke: opt.stroke, 'stroke-width': opt.strokeWidth + ''
	})];
	if (opt.complement === true) {
		var _arr = [[0, 0], [0, s], [s, s], [s, 0]];

		for (var _i = 0; _i < _arr.length; _i++) {
			var _ref = _arr[_i];

			var _ref2 = _slicedToArray(_ref, 2);

			var x = _ref2[0];
			var y = _ref2[1];
			children.push(dom('circle', {
				cx: x, cy: y, r: opt.radius,
				fill: opt.fill,
				stroke: opt.stroke, 'stroke-width': opt.strokeWidth + ''
			}));
		}
	}Object.assign(opt, {
		width: opt.size, height: opt.size,
		children: children,
		bg: opt.background
	});
	return pattern(opt);
};

module.exports = circles;